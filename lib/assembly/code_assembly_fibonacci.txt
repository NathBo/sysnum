
(* 
 On considère que ra stocke les secondes, rb les minutes, rc les heures, rd les jours et re les mois, rf les années
 rg le compteur modulo 4, rh le compteur modulo 100, ri le compteur modulo 400.
 Les registres rj à ro sont utilisés pour stocker les constantes intérmédiaires nécessaire pour les calculs. En pratique, on utilise pour l'instant uniquement 
 les registres rj, rk et rl. rl va être utilisé pour charger les constantes nécessaires pour comparer des trucs
 Il faut savoir dans registres de la RAM sont stockés les valeurs initiales. Est-ce que c'est une bonne idée d'attribuer a un certain registre le rôle de
 stack pointer? Pour l'instant, on va dire que rp a le rôle de stack pointer
 Le registre ri va être destiné à stocker toqutes les constantes dont on aura besoin pour le comparaison avec le jump
 L'adresse 0 de la RAM va servir pour savoir si une seconde est passée ou pas
 Pour les valeurs initiales, l'adresse 1 va stocker les secondes, l'adresse 2 les minutes, l'adresse 3 les heures, l'adresse 4 les jours, l'adresse 5 les mois, l'adresse
 6 les années
 Le nombre d'années va être stocké sous la forme (chiffre des unités, chiffre des dizaines, chiffre des centaines, chiffre des milliers) dans les adresses ram 13, 14, 15, 16.
 On a fait ce choix afin de faciliter l'affichage, qui ne nécessiter que 40 tests contre 10000 si on appliquer la même méthode que pour les secondes, minutes, heures et jours
*)

label CHARGEMENT_VALEURS (* Chargement de toutes les valeurs nécessaires pour commencer *)
movc ra 1
movc rb 1
movc rc 1
getram rd rj 4
getram re rj 5
getram rf rj 6

setram rd rj 10
setram re rj 11
setram rf rj 12

movc rd 0
movc re 0
movc rf 0
movc rg 0


label DEBUT (* Le programme commence ici *)
movc rj 0
setram ra rj 9
setram re rj 8
setram rb rj 7

label TEST_AJOUT_SECONDE (* Test pour savoir s'il faut ajouter une seconde ou non *)
movc rj 1
getram rk rj 12
jump rj rk AJOUT_SECONDE
movc rj 0
getram rk rj 0
jump rj rk TEST_AJOUT_SECONDE
setram rj rj 0

(* Début du programme, gestion des secondes *)
label AJOUT_SECONDE
addc ra 1

movr rd rc
add rc rb
movr rb rd

movr rg rf
add rf re
movr re rg

compc rc rb DEPASSEMENT

jump ra ra DEBUT (* Pour que ça boucle *)

label DEPASSEMENT

addc re 1
addc rf 1
jump ra ra DEBUT